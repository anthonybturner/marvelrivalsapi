// <auto-generated />
using MarvelRivalsApiAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarvelRivalsApiAPI.Migrations
{
    [DbContext(typeof(MarvelRivalsDBContext))]
    [Migration("20250713134004_AddMarvelRivalsChanges6")]
    partial class AddMarvelRivalsChanges6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.IsWinInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsWin")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "is_win");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "score");

                    b.HasKey("id");

                    b.ToTable("IsWinInfo");

                    b.HasAnnotation("Relational:JsonPropertyName", "is_win");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameModeId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "game_mode_id");

                    b.Property<string>("MapThumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "map_thumbnail");

                    b.Property<int>("MatchMapId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "match_map_id");

                    b.Property<string>("MatchMapName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "match_map_name");

                    b.Property<double>("MatchPlayDuration")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "match_play_duration");

                    b.Property<int>("MatchPlayerid")
                        .HasColumnType("int");

                    b.Property<string>("MatchSeason")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "match_season");

                    b.Property<long>("MatchTimeStamp")
                        .HasColumnType("bigint")
                        .HasAnnotation("Relational:JsonPropertyName", "match_time_stamp");

                    b.Property<string>("MatchUid")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "match_uid");

                    b.Property<int>("MatchWinnerSide")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "match_winner_side");

                    b.Property<int>("MvpUid")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "mvp_uid");

                    b.Property<int>("PlayModeId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "play_mode_id");

                    b.Property<int?>("ScoreInfoId")
                        .HasColumnType("int");

                    b.Property<int>("SvpUid")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "svp_uid");

                    b.HasKey("Id");

                    b.HasIndex("MatchPlayerid");

                    b.HasIndex("ScoreInfoId");

                    b.ToTable("MatchHistory");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchPlayer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int?>("Camp")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<bool>("Disconnected")
                        .HasColumnType("bit");

                    b.Property<int>("IsWinId")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerHeroId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerUid")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "player_uid");

                    b.Property<int?>("ScoreInfoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IsWinId");

                    b.HasIndex("PlayerHeroId");

                    b.HasIndex("ScoreInfoid");

                    b.ToTable("MatchPlayer");

                    b.HasAnnotation("Relational:JsonPropertyName", "match_player");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.PlayerHero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Assists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deaths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<string>("HeroName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayTimeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeroDamage")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeroHeal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PlayerHero");

                    b.HasAnnotation("Relational:JsonPropertyName", "player_hero");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.PlayerScoreInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("addScore")
                        .HasColumnType("int");

                    b.Property<int?>("level")
                        .HasColumnType("int");

                    b.Property<int?>("newLevel")
                        .HasColumnType("int");

                    b.Property<int?>("newScore")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("PlayerScoreInfo");

                    b.HasAnnotation("Relational:JsonPropertyName", "score_info");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.ScoreInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Lose")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "0");

                    b.Property<int>("Win")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "1");

                    b.HasKey("Id");

                    b.ToTable("ScoreInfo");

                    b.HasAnnotation("Relational:JsonPropertyName", "score_info");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchHistory", b =>
                {
                    b.HasOne("MarvelRivalsApiAPI.Data.MatchPlayer", "MatchPlayer")
                        .WithMany()
                        .HasForeignKey("MatchPlayerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarvelRivalsApiAPI.Data.ScoreInfo", "ScoreInfo")
                        .WithMany()
                        .HasForeignKey("ScoreInfoId");

                    b.Navigation("MatchPlayer");

                    b.Navigation("ScoreInfo");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchPlayer", b =>
                {
                    b.HasOne("MarvelRivalsApiAPI.Data.IsWinInfo", "IsWin")
                        .WithMany()
                        .HasForeignKey("IsWinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarvelRivalsApiAPI.Data.PlayerHero", "PlayerHero")
                        .WithMany()
                        .HasForeignKey("PlayerHeroId");

                    b.HasOne("MarvelRivalsApiAPI.Data.PlayerScoreInfo", "ScoreInfo")
                        .WithMany()
                        .HasForeignKey("ScoreInfoid");

                    b.Navigation("IsWin");

                    b.Navigation("PlayerHero");

                    b.Navigation("ScoreInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
