// <auto-generated />
using MarvelRivalsApiAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarvelRivalsApiAPI.Migrations
{
    [DbContext(typeof(MarvelRivalsDBContext))]
    partial class MarvelRivalsDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.IsWinInfo", b =>
                {
                    b.Property<int>("IsWinInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IsWinInfoId"));

                    b.Property<bool>("IsWin")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("IsWinInfoId");

                    b.ToTable("IsWinInfo");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchHistoryItem", b =>
                {
                    b.Property<int>("MatchMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchMapId"));

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<string>("MapThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchMapName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchPlayDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchPlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatchSeason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MatchTimeStamp")
                        .HasColumnType("bigint");

                    b.Property<string>("MatchUid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchWinnerSide")
                        .HasColumnType("int");

                    b.Property<int>("MvpUid")
                        .HasColumnType("int");

                    b.Property<int>("PlayModeId")
                        .HasColumnType("int");

                    b.Property<string>("ScoreInfoJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SvpUid")
                        .HasColumnType("int");

                    b.HasKey("MatchMapId");

                    b.HasIndex("MatchPlayerId");

                    b.ToTable("MatchHistory");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchPlayer", b =>
                {
                    b.Property<string>("PlayerUid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int?>("Camp")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnType("int");

                    b.Property<bool>("Disconnected")
                        .HasColumnType("bit");

                    b.Property<int>("IsWinId")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnType("int");

                    b.Property<int>("PlayerHeroId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreInfoId")
                        .HasColumnType("int");

                    b.HasKey("PlayerUid");

                    b.HasIndex("IsWinId");

                    b.HasIndex("PlayerHeroId");

                    b.HasIndex("ScoreInfoId");

                    b.ToTable("MatchPlayer");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.PlayTime", b =>
                {
                    b.Property<int>("PlayTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayTimeId"));

                    b.Property<string>("formatted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("raw")
                        .HasColumnType("int");

                    b.HasKey("PlayTimeId");

                    b.ToTable("PlayTime");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.PlayerHero", b =>
                {
                    b.Property<int>("HeroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeroId"));

                    b.Property<string>("Assists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deaths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayTimeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDamageTaken")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeroDamage")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeroHeal")
                        .HasColumnType("int");

                    b.HasKey("HeroId");

                    b.HasIndex("PlayTimeId");

                    b.ToTable("PlayerHero");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.PlayerScoreInfo", b =>
                {
                    b.Property<int>("PlayerScoreInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerScoreInfoId"));

                    b.Property<int>("addScore")
                        .HasColumnType("int");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<int>("newLevel")
                        .HasColumnType("int");

                    b.Property<int>("newScore")
                        .HasColumnType("int");

                    b.HasKey("PlayerScoreInfoId");

                    b.ToTable("PlayerScoreInfo");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchHistoryItem", b =>
                {
                    b.HasOne("MarvelRivalsApiAPI.Data.MatchPlayer", "MatchPlayer")
                        .WithMany()
                        .HasForeignKey("MatchPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchPlayer");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.MatchPlayer", b =>
                {
                    b.HasOne("MarvelRivalsApiAPI.Data.IsWinInfo", "IsWin")
                        .WithMany()
                        .HasForeignKey("IsWinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarvelRivalsApiAPI.Data.PlayerHero", "PlayerHero")
                        .WithMany()
                        .HasForeignKey("PlayerHeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarvelRivalsApiAPI.Data.PlayerScoreInfo", "ScoreInfo")
                        .WithMany()
                        .HasForeignKey("ScoreInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IsWin");

                    b.Navigation("PlayerHero");

                    b.Navigation("ScoreInfo");
                });

            modelBuilder.Entity("MarvelRivalsApiAPI.Data.PlayerHero", b =>
                {
                    b.HasOne("MarvelRivalsApiAPI.Data.PlayTime", "PlayTime")
                        .WithMany()
                        .HasForeignKey("PlayTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayTime");
                });
#pragma warning restore 612, 618
        }
    }
}
